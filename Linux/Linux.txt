🖥️ Server
- A system that provides services (like websites, files, data)
- Always running, waiting for client requests
- Example: Web server, database server

💻 Client
- A system that requests services from a server
- Sends requests and receives responses
- Example: Web browser, mobile app

📌 Client-Server Model is the core of networking:
Client requests → Server responds




Here’s a simple and short difference between Linux and Windows:

| Feature           | Linux                                | Windows                                 |
| ----------------- | ------------------------------------ | --------------------------------------- |
| **Source**        | Open-source (free to use and modify) | Closed-source (licensed by Microsoft)   |
| **Cost**          | Mostly free                          | Paid (some versions are free)           |
| **Security**      | More secure (fewer viruses)          | More prone to malware and viruses       |
| **Customization** | Highly customizable                  | Limited customization                   |
| **Command Line**  | Strong CLI support (bash/shell)      | CMD/PowerShell (less used by beginners) |
| **Usage**         | Preferred for servers and DevOps     | Preferred for desktops and gaming       |

| Feature                | **Linux**                                                    | **Windows**                                |
| ---------------------- | ------------------------------------------------------------ | ------------------------------------------ |
| **Preferred for**      | Servers, DevOps, cloud deployments                           | Desktop apps, some enterprise servers      |
| **Performance**        | Lightweight, better for running servers                      | Heavier, consumes more resources           |
| **Package Managers**   | Uses tools like `apt`, `yum` for automation                  | No built-in package manager like Linux     |
| **Scripting**          | Bash scripting (widely used in DevOps)                       | PowerShell (less common in DevOps)         |
| **Tool Compatibility** | Works seamlessly with tools like Docker, Ansible, Kubernetes | Some tools have limited or complex support |
| **SSH Support**        | Native, easy to set up and use                               | Needs setup, not as smooth as Linux        |
| **File System**        | Case-sensitive (`/var/log` ≠ `/VAR/LOG`)                     | Case-insensitive                           |


Here’s a simple and short difference between Unix and Linux:
| Feature          | **Unix**                      | **Linux**                                |
| ---------------- | ----------------------------- | ---------------------------------------- |
| **Source**       | Closed-source (mostly)        | Open-source (free to use & modify)       |
| **Cost**         | Commercial (paid)             | Mostly free                              |
| **Developed By** | AT\&T in the 1970s            | Linus Torvalds in 1991                   |
| **Usage**        | Mainly in servers, mainframes | Used in servers, desktops, cloud, DevOps |
| **Examples**     | AIX, HP-UX, Solaris           | Ubuntu, CentOS, Red Hat, Debian          |
| **Support**      | Vendor-dependent              | Community + Vendor support               |

📌 Linux is Unix-like and was created as a free alternative to Unix.


Here’s a simple and short explanation of Kernel, Bootloader, and Shell—important terms in Linux and DevOps:

🧠 Kernel
- Core of the OS.
- Manages hardware and system resources (CPU, memory, devices).
- Acts as a bridge between hardware and software.
Think of it as the brain of the OS.

💻 Shell
- Interface between the user and the kernel.
- Takes commands from the user and executes them.
- Types: Bash, Zsh, Sh
It’s like your command-line assistant.

🥾 Bootloader
- Program that loads the OS into memory when the system starts.
- Runs before the OS.
- Examples: GRUB, LILO
It’s the first thing that runs when you start your computer.



📁 Linux File System Structure (Hierarchy)
Everything starts from root / and branches like a tree.

| Directory          | Description                                     |
| ------------------ | ----------------------------------------------- |
| `/`                | Root directory (top of the file system)         |
| `/bin`             | Essential binary commands (e.g., `ls`, `cp`)    |
| `/boot`            | Bootloader files (e.g., `vmlinuz`, `grub`)      |
| `/etc`             | Configuration files for system and applications |
| `/home`            | User directories (e.g., `/home/priyanshu`)      |
| `/var`             | Variable data (logs, mail, cache, etc.)         |
| `/tmp`             | Temporary files (auto-deleted)                  |
| `/usr`             | User-installed apps and libraries               |
| `/root`            | Root user’s home directory                      |
| `/dev`             | Device files (e.g., hard drives, USBs)          |
| `/proc`            | Virtual files for system and process info       |
| `/lib`             | Essential shared libraries                      |
| `/sbin`            | System admin binaries (`reboot`, `shutdown`)    |
| `/media` or `/mnt` | Mounted devices (USBs, drives)                  |



⚙️ Here’s a short and easy explanation of the States of Processes in Linux (important for DevOps interviews):

| State Code | Name                         | Description                                                 |
| ---------- | ---------------------------- | ----------------------------------------------------------- |
| **R**      | **Running** / Runnable       | Process is either running or ready to run (in CPU queue).   |
| **S**      | **Sleeping** (Interruptible) | Waiting for an event (e.g., input/output). Can be woken up. |
| **D**      | **Uninterruptible Sleep**    | Waiting for I/O (e.g., disk). Cannot be interrupted.        |
| **T**      | **Stopped** / Traced         | Process is stopped (e.g., via `Ctrl+Z`) or being debugged.  |
| **Z**      | **Zombie**                   | Process finished but not cleaned up by parent.              |
| **X**      | **Dead**                     | Process is terminated (rarely shown).                       |

📌 Use ps aux or top to check process states in real time.




🐧 LINUX COMMAND CHEAT SHEET (With Proper Use Cases)

🔹 FILES & DIRECTORIES
ls, ls -lAh                                        => List files and directories with details and hidden files.
cd                                                 => Change directory.
pwd                                                => Print current working directory.
mkdir, mkdir -p                                    => Create directory. -p creates parent directories as needed.
rm, rm -rf                                         => Delete files or directories. Use -rf to delete recursively and forcefully.
cp, cp -r                                          => Copy files or directories. Use -r for recursive copy.
mv                                                 => Move or rename files or directories.
touch                                              => Create empty file or update timestamp.
stat                                               => Show detailed file info.

🔹 VIEWING & PROCESSING TEXT FILES
cat                                                => Show file content.
less, more                                         => View content one page at a time.
head -n N, tail -n N                               => Show first/last N lines.
tail -f                                            => Monitor file changes in real-time.
cut -d':' -f1                                      => Extract fields from lines.
sort, uniq                                         => Sort lines and remove duplicates.
wc -l                                              => Count lines in a file.
diff, cmp                                          => Compare files.
tr                                                 => Translate/replace characters.

🔹 SEARCHING FILES OR CONTENT
find /path -name "*.sh"                            => Find files by name in directory tree.
locate                                             => Fast file finding using DB.
grep, grep -r, -i                                  => Search for pattern in file(s).
xargs                                              => Convert input into arguments.
which, whereis                                     => Find path of a binary.
file                                               => Determine file type.

🔹 PERMISSIONS & OWNERSHIP
chmod 755                                          => Change file permissions.
chown user:group                                   => Change file ownership.
chgrp                                              => Change group ownership.
umask                                              => Set default permission for new files.

🔹 USER MANAGEMENT
adduser john                                       => Add a user.
passwd john                                        => Set/change password.
usermod -aG sudo john                              => Add user to group.
id, groups, whoami                                 => View user/group info.
deluser john                                       => Delete a user.
last, w, who                                       => Show login and session info.

🔹 PROCESS & JOB MANAGEMENT
ps aux, top, htop                                  => Show running processes.
kill PID, killall name                             => Terminate processes.
nice, renice                                       => Set process priority.
jobs, fg, bg                                       => Manage background jobs.

🔹 NETWORKING
ip a, ifconfig                                     => Show network interfaces.
ping, traceroute                                   => Test network connection.
ss -tuln, netstat -tuln                            => View listening ports.
curl, wget                                         => Make web requests/download files.
telnet, nc                                         => Check port or TCP connection.
dig, nslookup                                      => DNS queries.

🔹 SYSTEM INFO & RESOURCE MONITORING
df -h                                              => Disk usage.
du -sh folder/                                     => Directory size.
free -h                                            => Memory usage.
uptime                                             => System uptime.
vmstat, iostat                                     => CPU, IO stats.
lsblk, blkid                                       => Block device info.

🔹 ARCHIVING & COMPRESSION
tar -czf file.tar.gz                               => Create archive.
tar -xzf file.tar.gz                               => Extract archive.
zip -r archive.zip                                 => Zip folder.
unzip archive.zip                                  => Extract zip file.
gzip, gunzip                                       => Compress/decompress files.

🔹 SERVICES (Systemd)
systemctl start nginx                              => Start a service.
systemctl stop nginx                               => Stop a service.
systemctl status nginx                             => Check service status.
systemctl enable nginx                             => Enable service on boot.
journalctl -u nginx                                => View service logs.

🔹 CRON JOBS
crontab -e                                         => Edit user's cron jobs.
crontab -l                                         => List user's cron jobs.

🔹 MISC COMMANDS
date, cal, date +%D or %T or +%H:%M                => Date/calendar info.
hostname                                           => Show/set hostname.
history                                            => Show command history.
alias, unalias                                     => Shortcut commands.
env, printenv                                      => Show environment variables.
echo $VAR                                          => Print variable.
exit, logout, shutdown, reboot                     => Exit/reboot/shutdown system.
