üñ•Ô∏è Server
- A system that provides services (like websites, files, data)
- Always running, waiting for client requests
- Example: Web server, database server

üíª Client
- A system that requests services from a server
- Sends requests and receives responses
- Example: Web browser, mobile app

üìå Client-Server Model is the core of networking:
Client requests ‚Üí Server responds


Here‚Äôs a simple and short difference between Linux and Windows:

| Feature           | Linux                                | Windows                                 |
| ----------------- | ------------------------------------ | --------------------------------------- |
| **Source**        | Open-source (free to use and modify) | Closed-source (licensed by Microsoft)   |
| **Cost**          | Mostly free                          | Paid (some versions are free)           |
| **Security**      | More secure (fewer viruses)          | More prone to malware and viruses       |
| **Customization** | Highly customizable                  | Limited customization                   |
| **Command Line**  | Strong CLI support (bash/shell)      | CMD/PowerShell (less used by beginners) |
| **Usage**         | Preferred for servers and DevOps     | Preferred for desktops and gaming       |

| Feature                | **Linux**                                                    | **Windows**                                |
| ---------------------- | ------------------------------------------------------------ | ------------------------------------------ |
| **Preferred for**      | Servers, DevOps, cloud deployments                           | Desktop apps, some enterprise servers      |
| **Performance**        | Lightweight, better for running servers                      | Heavier, consumes more resources           |
| **Package Managers**   | Uses tools like `apt`, `yum` for automation                  | No built-in package manager like Linux     |
| **Scripting**          | Bash scripting (widely used in DevOps)                       | PowerShell (less common in DevOps)         |
| **Tool Compatibility** | Works seamlessly with tools like Docker, Ansible, Kubernetes | Some tools have limited or complex support |
| **SSH Support**        | Native, easy to set up and use                               | Needs setup, not as smooth as Linux        |
| **File System**        | Case-sensitive (`/var/log` ‚â† `/VAR/LOG`)                     | Case-insensitive                           |


Here‚Äôs a simple and short difference between Unix and Linux:
| Feature          | **Unix**                      | **Linux**                                |
| ---------------- | ----------------------------- | ---------------------------------------- |
| **Source**       | Closed-source (mostly)        | Open-source (free to use & modify)       |
| **Cost**         | Commercial (paid)             | Mostly free                              |
| **Developed By** | AT\&T in the 1970s            | Linus Torvalds in 1991                   |
| **Usage**        | Mainly in servers, mainframes | Used in servers, desktops, cloud, DevOps |
| **Examples**     | AIX, HP-UX, Solaris           | Ubuntu, CentOS, Red Hat, Debian          |
| **Support**      | Vendor-dependent              | Community + Vendor support               |

üìå Linux is Unix-like and was created as a free alternative to Unix.


Here‚Äôs a simple and short explanation of Kernel, Bootloader, and Shell‚Äîimportant terms in Linux and DevOps:

üß† Kernel
- Core of the OS.
- Manages hardware and system resources (CPU, memory, devices).
- Acts as a bridge between hardware and software.
Think of it as the brain of the OS.

üíª Shell
- Interface between the user and the kernel.
- Takes commands from the user and executes them.
- Types: Bash, Zsh, Sh
It‚Äôs like your command-line assistant.

ü•æ Bootloader
- Program that loads the OS into memory when the system starts.
- Runs before the OS.
- Examples: GRUB, LILO
It‚Äôs the first thing that runs when you start your computer.



üìÅ Linux File System Structure (Hierarchy)
Everything starts from root / and branches like a tree.

| Directory          | Description                                     |
| ------------------ | ----------------------------------------------- |
| `/`                | Root directory (top of the file system)         |
| `/bin`             | Essential binary commands (e.g., `ls`, `cp`)    |
| `/boot`            | Bootloader files (e.g., `vmlinuz`, `grub`)      |
| `/etc`             | Configuration files for system and applications |
| `/home`            | User directories (e.g., `/home/priyanshu`)      |
| `/var`             | Variable data (logs, mail, cache, etc.)         |
| `/tmp`             | Temporary files (auto-deleted)                  |
| `/usr`             | User-installed apps and libraries               |
| `/root`            | Root user‚Äôs home directory                      |
| `/dev`             | Device files (e.g., hard drives, USBs)          |
| `/proc`            | Virtual files for system and process info       |
| `/lib`             | Essential shared libraries                      |
| `/sbin`            | System admin binaries (`reboot`, `shutdown`)    |
| `/media` or `/mnt` | Mounted devices (USBs, drives)                  |



‚öôÔ∏è Here‚Äôs a short and easy explanation of the States of Processes in Linux (important for DevOps interviews):

| State Code | Name                         | Description                                                 |
| ---------- | ---------------------------- | ----------------------------------------------------------- |
| **R**      | **Running** / Runnable       | Process is either running or ready to run (in CPU queue).   |
| **S**      | **Sleeping** (Interruptible) | Waiting for an event (e.g., input/output). Can be woken up. |
| **D**      | **Uninterruptible Sleep**    | Waiting for I/O (e.g., disk). Cannot be interrupted.        |
| **T**      | **Stopped** / Traced         | Process is stopped (e.g., via `Ctrl+Z`) or being debugged.  |
| **Z**      | **Zombie**                   | Process finished but not cleaned up by parent.              |
| **X**      | **Dead**                     | Process is terminated (rarely shown).                       |

üìå Use ps aux or top to check process states in real time.

------------------------------------------------------------------------------------------------------------------------
1. What is Linux?
Linux is an open-source operating system kernel that serves as the foundation for many different distributions, known as Linux distributions or simply Linux distros.

2. What are the flavors of Linux?
Ubuntu, CentOS, Suse, RedHat, Debian.

3. What is the difference between UNIX and Linux?
UNIX is an older operating system that served as the inspiration for Linux. Linux is a Unix-like operating system that was developed independently but shares many similarities with UNIX.

4. What is the difference between a process and a thread in Linux?
A process is an instance of a program that is running on a system, while a thread is a lightweight process that shares the resources of a process.

5. What is the difference between a hard link and a soft link in Linux?
A hard link is a link to a file that points to the same inode as the original file, while a soft link (also known as a symbolic link) is a link to a file that points to the file‚Äôs path.

6. What is a shell in Linux?
The shell is a command-line interpreter that allows users to interact with the operating system. It provides a way to execute commands and run programs.

7. What is a process in Linux?
A process is an instance of a running program. It represents the execution of a program in memory and includes information such as the program‚Äôs code, data, and resources.

8. How can you check the memory usage of a Linux system?
The ‚Äúfree‚Äù command displays information about the system‚Äôs memory usage, including total memory, used memory, free memory, and swap usage.

9. How do you find the IP address of a Linux system?
The ‚Äúifconfig‚Äù command displays network interface information, including IP addresses assigned to the system.

10. How do you find the list of running processes in Linux?
The ‚Äúps‚Äù command can be used to display a list of running processes. Adding options like ‚Äú-ef‚Äù or ‚Äú-aux‚Äù provides more detailed information.

11. How do you kill a process in Linux?
The ‚Äúkill‚Äù command is used to terminate a process. It requires the process ID (PID) of the process to be killed. The PID can be obtained using the ‚Äúps‚Äù command.

12. What is the purpose of the ‚Äúchmod‚Äù command in Linux?
The ‚Äúchmod‚Äù command is used to change the permissions of files and directories in Linux. It can be used to grant or revoke read, write, and execute permissions.

13. How do you search for a file in Linux?
The ‚Äúfind‚Äù command allows you to search for files based on various criteria, such as name, size, or modification time. For example, ‚Äúfind / -name myfile.txt‚Äù searches for a file named ‚Äúmyfile.txt‚Äù starting from the root directory.

14. What is SSH?
SSH (Secure Shell) is a network protocol that provides a secure way to access and manage remote systems. It allows encrypted communication between a client and a server.

15. How do you connect to a remote Linux server using SSH?
You can connect to a remote Linux server using SSH by running the command ‚Äússh username@hostname‚Äù in a terminal. Replace ‚Äúusername‚Äù with your username and ‚Äúhostname‚Äù with the server‚Äôs IP address or domain name.

16. What is the purpose of the ‚Äúgrep‚Äù command?
The ‚Äúgrep‚Äù command is used to search for specific patterns within files. It is commonly used for text searching and pattern matching.

17. How do you check the disk usage in Linux?
The ‚Äúdf‚Äù command displays information about disk space usage on file systems. Adding the ‚Äú-h‚Äù option provides human-readable output.

18. How can you compress and decompress files in Linux?
The ‚Äúgzip‚Äù command is used to compress files, creating a ‚Äú.gz‚Äù file. To decompress a compressed file, you can use the ‚Äúgunzip‚Äù command.

19. How do you check the disk space usage of a specific directory in Linux?
The ‚Äúdu‚Äù command is used to estimate the disk space usage of a directory and its subdirectories. Adding the ‚Äú-h‚Äù option provides a more readable output.

20. How do you monitor system performance in Linux?
The ‚Äútop‚Äù command is commonly used to monitor system performance in real-time. It displays information about CPU usage, memory usage, running processes, and more.

21. What is a package manager in Linux?
A package manager is a tool used to manage software packages in a Linux distribution. It handles package installation, updates, and removal. Examples of package managers are ‚Äúapt‚Äù for Debian-based distributions and ‚Äúyum‚Äù for Red Hat-based distributions.

22. How do you install software in Linux?
The method of installing software in Linux depends on the distribution. For Debian-based distributions like Ubuntu, you can use the ‚Äúapt‚Äù or ‚Äúapt-get‚Äù command. For Red Hat-based distributions like CentOS, you can use the ‚Äúyum‚Äù or ‚Äúdnf‚Äù command.

23. How do you add a user in Linux?
The ‚Äúuseradd‚Äù command is used to add a user in Linux. For example, ‚Äúuseradd username‚Äù creates a new user with the username specified.

24. How do you change the password for a user in Linux?
The ‚Äúpasswd‚Äù command is used to change the password for a user in Linux. Running ‚Äúpasswd username‚Äù prompts you to enter a new password for the specified user.

25. What is the purpose of the ‚Äúcron‚Äù daemon in Linux?
The ‚Äúcron‚Äù daemon is a time-based job scheduler in Linux. It allows users to schedule and automate the execution of commands or scripts at specified intervals or times.

26. How do you schedule a cron job in Linux?
To schedule a cron job, you can use the ‚Äúcrontab‚Äù command. Running ‚Äúcrontab -e‚Äù opens the user‚Äôs crontab file, where you can specify the command or script to be executed and the schedule.

27. What is the difference between SSH and SSL?
SSH (Secure Shell) is a network protocol used for secure remote access and management of systems. SSL (Secure Sockets Layer) is a security protocol used to establish secure encrypted connections between clients and servers, commonly used for secure web communication (HTTPS).

28. How do you check the network connectivity in Linux?
The ‚Äúping‚Äù command is used to check network connectivity between your machine and a remote host. Running ‚Äúping hostname‚Äù sends ICMP echo requests to the specified hostname or IP address and displays the response time.

29. What is a firewall in Linux?
A firewall is a network security tool that filters incoming and outgoing network traffic based on predefined rules. It helps protect systems from unauthorized access and network-based attacks.

30. What is a RAID in Linux?
RAID (Redundant Array of Independent Disks) is a technology used to combine multiple physical disk drives into a single logical unit. It provides improved performance, data redundancy, or a combination of both, depending on the RAID level used.

31. How do you create a partition in Linux?
The ‚Äúfdisk‚Äù command is commonly used to create partitions in Linux.

32. What are some common tools used for automated testing in a Linux DevOps environment?
Automated testing in a Linux DevOps environment involves tools that help run tests quickly and consistently. Common tools include:
JUnit: A testing framework for unit testing Java applications.
Selenium: A testing framework that enables testing of web applications across different browsers.
Jenkins: An automation server used to build, test, and deploy code.
Travis CI: A cloud-based continuous integration service that automates testing.
GitLab CI: A platform used for the continuous integration and delivery of code.
These tools streamline the testing process, save time, and ensure that the code meets quality standards.